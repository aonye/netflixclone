{"ast":null,"code":"var _jsxFileName = \"/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Account.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { auth } from '../firebase/firebase';\nimport { useHistory } from 'react-router-dom';\nimport { customMsg, checkPwMatch } from '../helper/helper';\nimport { getAuth, updateEmail, updateProfile, updatePassword, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, reauthenticateWithCredential, EmailAuthProvider } from \"firebase/auth\";\nimport AuthMsg from './AuthMsg';\nimport '../styles/Account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Account = ({\n  displayName,\n  email,\n  acctMsg,\n  setAcctMsg\n}) => {\n  _s();\n\n  const nameField = useRef();\n  const emailField = useRef();\n  const currentPw = useRef();\n  const pw = useRef();\n  const confirmPw = useRef();\n  const [error, setError] = useState(null);\n  const history = useHistory();\n\n  function redirectSignUp() {\n    history.push(`dashboard`);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const promiseArr = [];\n    const cred = EmailAuthProvider.credential(auth.currentUser.email, currentPw.current.value);\n    reauthenticateWithCredential(auth.currentUser, cred).then(() => {\n      // User re-authed.\n      checkName(promiseArr);\n      checkEmail(promiseArr);\n      checkPassword(promiseArr);\n    }).catch(error => {\n      // An error ocurred\n      setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n        useClass: `auth-error`,\n        msg: customMsg(error.code)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 22\n      }, this));\n      return;\n    });\n\n    function checkName(promiseArr) {\n      //optional\n      if (nameField.current.value !== '') {\n        promiseArr.push(updateProfile(auth.currentUser, nameField.current.value));\n      }\n    }\n\n    function checkEmail(promiseArr) {\n      //optional\n      if (auth.currentUser.email !== emailField.current.value) {\n        promiseArr.push(updateEmail(auth.currentUser, emailField.current.value));\n      }\n    }\n\n    function checkPassword(promiseArr) {\n      if (pw.current.value !== confirmPw.current.value) {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(`New passwords must match.`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 26\n        }, this));\n        throw {\n          error: 'Error',\n          code: 'xD'\n        };\n      }\n\n      if (pw.current.value === currentPw.current.value) {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(`New password cannot be the same as current.`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 26\n        }, this));\n        throw error;\n      }\n    } // const auth = getAuth();\n    // const user = auth.currentUser;\n    // TODO(you): prompt the user to re-provide their sign-in credentials\n    //console.log(credential);\n    // reauthenticateWithCredential(auth.currentUser, credential).then(() => {\n    //     console.log('reauthed');\n    //     // User re-authenticated.\n    // }).catch((error) => {\n    //     // An error ocurred\n    // });\n    // const promises = [];\n    // promises.push(updateEmail(auth.currentUser, emailField.current.value));\n    // promises.push(updatePassword(auth.currentUser, pw.current.value));\n    // Promise.all(promises)\n    //     .then(() => {\n    //         history.push('/dashboard')\n    //     })\n    //     .catch((error) => {\n    //         alert(error);\n    //     })\n    //     .finally(() => {\n    //     })\n    //await saveUserEmail();\n    //await saveUserPassword(auth, );\n    //redirectSignUp();\n    //window.location.reload();\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"acct\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"acct-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Update Account Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"(Leave 'new' fields blank if not updating)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), error, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Current Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: currentPw,\n          type: \"password\",\n          placeholder: \"Current Password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: nameField,\n          type: \"text\",\n          placeholder: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: emailField,\n          type: \"email\",\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: pw,\n          type: \"password\",\n          minLength: \"6\",\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: confirmPw,\n          type: \"password\",\n          minLength: \"6\",\n          placeholder: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"acct-submit\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Account, \"yU6wToCPL3BlURB3qY/5U0MDd1w=\", false, function () {\n  return [useHistory];\n});\n\n_c = Account;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Account.js"],"names":["useRef","useState","auth","useHistory","customMsg","checkPwMatch","getAuth","updateEmail","updateProfile","updatePassword","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStateChanged","reauthenticateWithCredential","EmailAuthProvider","AuthMsg","Account","displayName","email","acctMsg","setAcctMsg","nameField","emailField","currentPw","pw","confirmPw","error","setError","history","redirectSignUp","push","handleSubmit","e","preventDefault","promiseArr","cred","credential","currentUser","current","value","then","checkName","checkEmail","checkPassword","catch","code"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport { auth } from '../firebase/firebase';\nimport { useHistory } from 'react-router-dom';\nimport { customMsg, checkPwMatch } from '../helper/helper';\nimport {\n    getAuth,\n    updateEmail,\n    updateProfile,\n    updatePassword,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    onAuthStateChanged,\n    reauthenticateWithCredential,\n    EmailAuthProvider,\n} from \"firebase/auth\";\nimport AuthMsg from './AuthMsg';\nimport '../styles/Account.css';\n\nconst Account = ({ displayName, email, acctMsg, setAcctMsg }) => {\n    const nameField = useRef();\n    const emailField = useRef();\n    const currentPw = useRef();\n    const pw = useRef();\n    const confirmPw = useRef();\n\n    const [error, setError] = useState(null);\n    const history = useHistory();\n\n    function redirectSignUp() {\n        history.push(`dashboard`);\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const promiseArr = [];\n        const cred = EmailAuthProvider.credential(auth.currentUser.email, currentPw.current.value);\n        reauthenticateWithCredential(auth.currentUser, cred).then(() => {\n            // User re-authed.\n            checkName(promiseArr);\n            checkEmail(promiseArr);\n            checkPassword(promiseArr);\n\n        }).catch((error) => {\n            // An error ocurred\n            setError(<AuthMsg useClass={`auth-error`} msg={customMsg(error.code)} />);\n            return;\n        });\n\n        function checkName(promiseArr) { //optional\n            if (nameField.current.value !== '') {\n                promiseArr.push(updateProfile(auth.currentUser, nameField.current.value));\n            }\n        }\n\n        function checkEmail(promiseArr) { //optional\n            if (auth.currentUser.email !== emailField.current.value) {\n                promiseArr.push(updateEmail(auth.currentUser, emailField.current.value));\n            }\n        }\n\n        function checkPassword(promiseArr) {\n            if (pw.current.value !== confirmPw.current.value) {\n                setError(<AuthMsg useClass={`auth-error`} msg={customMsg(`New passwords must match.`)} />);\n                throw { error: 'Error', code: 'xD' };\n            }\n            if (pw.current.value === currentPw.current.value) {\n                setError(<AuthMsg useClass={`auth-error`} msg={customMsg(`New password cannot be the same as current.`)} />);\n                throw (error);\n            }\n        }\n\n\n\n\n        // const auth = getAuth();\n        // const user = auth.currentUser;\n\n        // TODO(you): prompt the user to re-provide their sign-in credentials\n        //console.log(credential);\n\n\n        // reauthenticateWithCredential(auth.currentUser, credential).then(() => {\n        //     console.log('reauthed');\n        //     // User re-authenticated.\n        // }).catch((error) => {\n        //     // An error ocurred\n        // });\n\n\n        // const promises = [];\n        // promises.push(updateEmail(auth.currentUser, emailField.current.value));\n        // promises.push(updatePassword(auth.currentUser, pw.current.value));\n        // Promise.all(promises)\n        //     .then(() => {\n        //         history.push('/dashboard')\n        //     })\n        //     .catch((error) => {\n        //         alert(error);\n        //     })\n        //     .finally(() => {\n        //     })\n        //await saveUserEmail();\n        //await saveUserPassword(auth, );\n        //redirectSignUp();\n        //window.location.reload();\n    }\n    return (\n        <div className='acct'>\n            <div className='acct-container'>\n                <h1>Update Account Info</h1>\n                <h2>(Leave 'new' fields blank if not updating)</h2>\n                {error}\n                <form onSubmit={(e) => handleSubmit(e)}>\n\n                    <label>Current Password</label>\n                    <input ref={currentPw} type='password' placeholder='Current Password' required></input>\n\n                    <label>New Name</label>\n                    <input ref={nameField} type='text' placeholder='First Name'></input>\n\n                    <label>New Email</label>\n                    <input ref={emailField} type='email' placeholder='Email'></input>\n\n                    <label>New Password</label>\n                    <input ref={pw} type='password' minLength='6' placeholder='Password'></input>\n\n                    <label>Confirm New Password</label>\n                    <input ref={confirmPw} type='password' minLength='6' placeholder='Confirm Password'></input>\n\n                    <input id='acct-submit' type='submit' value='Submit'></input>\n                </form>\n            </div>\n            <div className='overlay'></div>\n        </div >\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}