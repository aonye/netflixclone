{"ast":null,"code":"var _jsxFileName = \"/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { capitalizeFirstLetter } from '../helper/helper';\nimport YoutubeEmbed from './YoutubeEmbed';\nimport MainMedia from './MainMedia';\nimport MediaBar from './MediaBar';\nimport Preview from './Preview';\nimport { configTitle } from '../helper/helper';\nimport '../styles/Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = ({\n  mediaType,\n  MTKey\n}) => {\n  _s();\n\n  const [currentMedia, setCurrentMedia] = useState(null);\n  const [preview, setPreview] = useState({\n    currentFilm: null,\n    currentGenre: null\n  });\n  const currentPV = useRef();\n\n  async function onClickHand(e) {\n    const [genre,,] = e.target.classList;\n    const filmName = e.target.alt;\n    const {\n      title,\n      description,\n      YTLink\n    } = mediaType[MTKey][genre].find(item => item.title === filmName);\n    setPreview({\n      currentFilm: /*#__PURE__*/_jsxDEV(Preview, {\n        ref: currentPV,\n        image: getPreview(MTKey, genre, filmName),\n        hoverPlayBtn: hoverPlayBtn,\n        hoverOffPlayBtn: hoverOffPlayBtn,\n        playBtnClickHand: playBtnClickHand,\n        title: configTitle(title),\n        description: description,\n        YTLink: YTLink\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this),\n      currentGenre: genre\n    });\n\n    if (window.innerWidth < 1000) {\n      //automatically open the link if <1000px width\n      setCurrentMedia( /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: YTLink,\n        stopPlayHand: stopPlayHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 29\n      }, this));\n    }\n  }\n\n  function getPreview(key, genre, filmName) {\n    return require(`../assets/${key}/${genre}/${filmName}/large.jpg`).default;\n  }\n\n  function hoverPlayBtn(e) {\n    e.target.classList.add('hover');\n  }\n\n  function hoverOffPlayBtn(e) {\n    e.target.classList.remove('hover');\n  }\n\n  function hoverImgHand(e) {\n    e.target.classList.add('cardImgHover');\n  }\n\n  function hoverOutImgHand(e) {\n    e.target.classList.remove('cardImgHover');\n  }\n\n  function playBtnClickHand(e, url) {\n    setCurrentMedia( /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n      embedId: url,\n      stopPlayHand: stopPlayHand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this));\n  }\n\n  function stopPlayHand(e) {\n    setCurrentMedia(null);\n  }\n\n  function onXClick() {}\n\n  function makeMediaBar() {\n    let arr = [];\n    const key = Object.keys(mediaType);\n\n    for (let genre in mediaType[key]) {\n      arr.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-title\",\n            children: capitalizeFirstLetter(genre)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MediaBar, {\n            genre: genre,\n            mediaType: mediaType,\n            MTKey: MTKey,\n            onClickHand: onClickHand,\n            hoverImgHand: hoverImgHand,\n            hoverOutImgHand: hoverOutImgHand\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `${genre}Preview`,\n            className: \"preview-container\",\n            children: preview.currentGenre === genre && preview.currentFilm !== null ? preview.currentFilm : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this));\n    }\n\n    return arr.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(MainMedia, {\n      display: `joker`,\n      hoverPlayBtn: hoverPlayBtn,\n      hoverOffPlayBtn: hoverOffPlayBtn,\n      playBtnClickHand: playBtnClickHand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: makeMediaBar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), currentMedia]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"yuYR+eqBA2Z2LxFS2r3K29byjq0=\");\n\n_c = Dashboard;\nexport default Dashboard;\n{\n  /* <div ref={media}>\n     <div>\n         <MediaBar title={`children`} onClickHand={onClickHand} />\n         <div id='children'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`drama`} onClickHand={onClickHand} />\n         <div id='drama'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`romance`} onClickHand={onClickHand} />\n         <div id='romance'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`suspense`} onClickHand={onClickHand} />\n         <div id='suspense'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`thriller`} onClickHand={onClickHand} />\n         <div id='thriller'>Hello World</div>\n     </div>\n  </div> */\n} // <div className='previewCont'>\n//     <p className='previewTitle'>{configTitle(item.title)}</p>\n//     <p>{item.description}</p>\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Dashboard.js"],"names":["useState","useRef","capitalizeFirstLetter","YoutubeEmbed","MainMedia","MediaBar","Preview","configTitle","Dashboard","mediaType","MTKey","currentMedia","setCurrentMedia","preview","setPreview","currentFilm","currentGenre","currentPV","onClickHand","e","genre","target","classList","filmName","alt","title","description","YTLink","find","item","getPreview","hoverPlayBtn","hoverOffPlayBtn","playBtnClickHand","window","innerWidth","stopPlayHand","key","require","default","add","remove","hoverImgHand","hoverOutImgHand","url","onXClick","makeMediaBar","arr","Object","keys","push","map","index"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\nimport { capitalizeFirstLetter } from '../helper/helper';\nimport YoutubeEmbed from './YoutubeEmbed';\nimport MainMedia from './MainMedia';\nimport MediaBar from './MediaBar';\nimport Preview from './Preview';\nimport { configTitle } from '../helper/helper';\nimport '../styles/Dashboard.css';\n\nconst Dashboard = ({ mediaType, MTKey }) => {\n    const [currentMedia, setCurrentMedia] = useState(null);\n    const [preview, setPreview] = useState({\n        currentFilm: null,\n        currentGenre: null,\n    });\n    const currentPV = useRef();\n\n    async function onClickHand(e) {\n        const [genre, ,] = e.target.classList;\n        const filmName = e.target.alt;\n        const { title, description, YTLink } = mediaType[MTKey][genre].find((item) => item.title === filmName);\n        setPreview({\n            currentFilm:\n                <Preview\n                    ref={currentPV}\n                    image={getPreview(MTKey, genre, filmName)}\n                    hoverPlayBtn={hoverPlayBtn}\n                    hoverOffPlayBtn={hoverOffPlayBtn}\n                    playBtnClickHand={playBtnClickHand}\n                    title={configTitle(title)}\n                    description={description}\n                    YTLink={YTLink}\n                />,\n            currentGenre: genre\n        });\n        if (window.innerWidth < 1000) { //automatically open the link if <1000px width\n            setCurrentMedia(<YoutubeEmbed embedId={YTLink} stopPlayHand={stopPlayHand} />);\n        }\n    }\n\n    function getPreview(key, genre, filmName) {\n        return require(`../assets/${key}/${genre}/${filmName}/large.jpg`).default;\n    }\n\n    function hoverPlayBtn(e) {\n        e.target.classList.add('hover');\n    }\n\n    function hoverOffPlayBtn(e) {\n        e.target.classList.remove('hover');\n    }\n\n    function hoverImgHand(e) {\n        e.target.classList.add('cardImgHover');\n    }\n\n    function hoverOutImgHand(e) {\n        e.target.classList.remove('cardImgHover');\n    }\n\n    function playBtnClickHand(e, url) {\n        setCurrentMedia(<YoutubeEmbed embedId={url} stopPlayHand={stopPlayHand} />);\n    }\n\n    function stopPlayHand(e) {\n        setCurrentMedia(null);\n    }\n\n    function onXClick() {\n\n    }\n\n    function makeMediaBar() {\n        let arr = [];\n        const key = Object.keys(mediaType);\n        for (let genre in mediaType[key]) {\n            arr.push(\n                <div className='media-wrapper'>\n                    <div className='media-container'>\n                        <div className='media-title'>{capitalizeFirstLetter(genre)}</div>\n                        <MediaBar\n                            genre={genre}\n                            mediaType={mediaType}\n                            MTKey={MTKey}\n                            onClickHand={onClickHand}\n                            hoverImgHand={hoverImgHand}\n                            hoverOutImgHand={hoverOutImgHand}\n                        />\n                        <div id={`${genre}Preview`} className='preview-container'>\n                            {preview.currentGenre === genre && preview.currentFilm !== null ?\n                                preview.currentFilm :\n                                null\n                            }\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        return arr.map((item, index) => {\n            return (\n                <div key={index}>\n                    {item}\n                </div>\n            );\n        });\n    }\n\n    return (\n        <div className='dashboard'>\n            <MainMedia\n                display={`joker`}\n                hoverPlayBtn={hoverPlayBtn}\n                hoverOffPlayBtn={hoverOffPlayBtn}\n                playBtnClickHand={playBtnClickHand} />\n            <div>\n                {makeMediaBar()}\n            </div>\n            {currentMedia}\n        </div >\n    );\n};\n\nexport default Dashboard;\n\n\n{/* <div ref={media}>\n    <div>\n        <MediaBar title={`children`} onClickHand={onClickHand} />\n        <div id='children'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`drama`} onClickHand={onClickHand} />\n        <div id='drama'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`romance`} onClickHand={onClickHand} />\n        <div id='romance'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`suspense`} onClickHand={onClickHand} />\n        <div id='suspense'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`thriller`} onClickHand={onClickHand} />\n        <div id='thriller'>Hello World</div>\n    </div>\n</div> */}\n\n\n    // <div className='previewCont'>\n    //     <p className='previewTitle'>{configTitle(item.title)}</p>\n    //     <p>{item.description}</p>\n    // </div>"]},"metadata":{},"sourceType":"module"}