{"ast":null,"code":"var _jsxFileName = \"/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Account.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { auth } from '../firebase/firebase';\nimport { useHistory } from 'react-router-dom';\nimport { customMsg } from '../helper/helper';\nimport { updateEmail, updateProfile, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from \"firebase/auth\";\nimport AuthMsg from './AuthMsg';\nimport '../styles/Account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Account = ({\n  setEmail,\n  email\n}) => {\n  _s();\n\n  const nameField = useRef();\n  const emailField = useRef();\n  const currentPw = useRef();\n  const pw = useRef();\n  const confirmPw = useRef();\n  const [error, setError] = useState(null);\n  const history = useHistory();\n\n  function redirectSignUp() {\n    history.push(`dashboard`);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const promiseArr = [];\n    const cred = EmailAuthProvider.credential(auth.currentUser.email, currentPw.current.value);\n    reauthenticateWithCredential(auth.currentUser, cred).then(() => {\n      // User re-authed.\n      checkPassword(promiseArr); //checkName(promiseArr);\n\n      checkEmail(promiseArr);\n      Promise.all(promiseArr).then(() => {\n        setEmail(emailField.current.value);\n        console.log('success');\n        redirectSignUp();\n      }).catch(error => {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(`${error}`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 30\n        }, this));\n      }).finally(() => {\n        console.log('in here');\n      });\n    }).catch(error => {\n      // An error ocurred\n      console.log(error.code);\n\n      if (error.code) {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(error.code)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 26\n        }, this));\n      }\n\n      return;\n    });\n\n    function checkEmail(promiseArr) {\n      if (auth.currentUser.email !== emailField.current.value) {\n        promiseArr.push(updateEmail(auth.currentUser, emailField.current.value));\n      }\n    }\n\n    function checkPassword(promiseArr) {\n      if (pw.current.value !== confirmPw.current.value) {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(`New passwords must match.`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 26\n        }, this));\n        throw new Error();\n      }\n\n      if (pw.current.value === currentPw.current.value) {\n        setError( /*#__PURE__*/_jsxDEV(AuthMsg, {\n          useClass: `auth-error`,\n          msg: customMsg(`New password cannot be the same as current.`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 26\n        }, this));\n        throw new Error();\n      }\n\n      promiseArr.push(updatePassword(auth.currentUser, pw.current.value));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"acct\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"acct-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Update Account Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"(Leave 'new' fields blank if not updating)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), error, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Current Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: currentPw,\n          type: \"password\",\n          placeholder: \"Current Password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: emailField,\n          type: \"email\",\n          placeholder: \"Email\",\n          defaultValue: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: pw,\n          type: \"password\",\n          minLength: \"6\",\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: confirmPw,\n          type: \"password\",\n          minLength: \"6\",\n          placeholder: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"acct-submit\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Account, \"yU6wToCPL3BlURB3qY/5U0MDd1w=\", false, function () {\n  return [useHistory];\n});\n\n_c = Account;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Account.js"],"names":["useRef","useState","auth","useHistory","customMsg","updateEmail","updateProfile","updatePassword","reauthenticateWithCredential","EmailAuthProvider","AuthMsg","Account","setEmail","email","nameField","emailField","currentPw","pw","confirmPw","error","setError","history","redirectSignUp","push","handleSubmit","e","preventDefault","promiseArr","cred","credential","currentUser","current","value","then","checkPassword","checkEmail","Promise","all","console","log","catch","finally","code","Error"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport { auth } from '../firebase/firebase';\nimport { useHistory } from 'react-router-dom';\nimport { customMsg } from '../helper/helper';\nimport {\n    updateEmail,\n    updateProfile,\n    updatePassword,\n    reauthenticateWithCredential,\n    EmailAuthProvider,\n} from \"firebase/auth\";\nimport AuthMsg from './AuthMsg';\nimport '../styles/Account.css';\n\nconst Account = ({ setEmail, email }) => {\n    const nameField = useRef();\n    const emailField = useRef();\n    const currentPw = useRef();\n    const pw = useRef();\n    const confirmPw = useRef();\n\n    const [error, setError] = useState(null);\n    const history = useHistory();\n\n    function redirectSignUp() {\n        history.push(`dashboard`);\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const promiseArr = [];\n        const cred = EmailAuthProvider.credential(auth.currentUser.email, currentPw.current.value);\n        reauthenticateWithCredential(auth.currentUser, cred).then(() => {\n            // User re-authed.\n            checkPassword(promiseArr);\n            //checkName(promiseArr);\n            checkEmail(promiseArr);\n            Promise.all(promiseArr)\n                .then(() => {\n                    setEmail(emailField.current.value);\n                    console.log('success');\n                    redirectSignUp();\n                })\n                .catch((error) => {\n                    setError(<AuthMsg useClass={`auth-error`} msg={customMsg(`${error}`)} />);\n                })\n                .finally(() => {\n                    console.log('in here');\n                })\n        }).catch((error) => {\n            // An error ocurred\n            console.log(error.code);\n            if (error.code) {\n                setError(<AuthMsg useClass={`auth-error`} msg={customMsg(error.code)} />);\n            }\n            return;\n        });\n\n        function checkEmail(promiseArr) {\n            if (auth.currentUser.email !== emailField.current.value) {\n                promiseArr.push(updateEmail(auth.currentUser, emailField.current.value));\n            }\n        }\n\n        function checkPassword(promiseArr) {\n            if (pw.current.value !== confirmPw.current.value) {\n                setError(<AuthMsg useClass={`auth-error`} msg={customMsg(`New passwords must match.`)} />);\n                throw new Error();\n            }\n            if (pw.current.value === currentPw.current.value) {\n                setError(<AuthMsg useClass={`auth-error`} msg={customMsg(`New password cannot be the same as current.`)} />);\n                throw new Error();\n            }\n            promiseArr.push(updatePassword(auth.currentUser, pw.current.value));\n        }\n    }\n\n    return (\n        <div className='acct'>\n            <div className='acct-container'>\n                <div>\n                    <h1>Update Account Info</h1>\n                    <h2>(Leave 'new' fields blank if not updating)</h2>\n                </div>\n                {error}\n                <form onSubmit={(e) => handleSubmit(e)}>\n\n                    <label>Current Password</label>\n                    <input ref={currentPw} type='password' placeholder='Current Password' required></input>\n\n                    <label>New Email</label>\n                    <input ref={emailField} type='email' placeholder='Email' defaultValue={email}></input>\n\n                    <label>New Password</label>\n                    <input ref={pw} type='password' minLength='6' placeholder='Password'></input>\n\n                    <label>Confirm New Password</label>\n                    <input ref={confirmPw} type='password' minLength='6' placeholder='Confirm Password'></input>\n\n                    <input id='acct-submit' type='submit' value='Submit'></input>\n                </form>\n            </div>\n            <div className='overlay'></div>\n        </div >\n    );\n};\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}