{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\n\nconst dataProperties = require('./data-properties');\n\nconst {\n  CoverageSummary\n} = require('./coverage-summary'); // returns a data object that represents empty coverage\n\n\nfunction emptyCoverage(filePath) {\n  return {\n    path: filePath,\n    statementMap: {},\n    fnMap: {},\n    branchMap: {},\n    s: {},\n    f: {},\n    b: {}\n  };\n} // asserts that a data object \"looks like\" a coverage object\n\n\nfunction assertValidObject(obj) {\n  const valid = obj && obj.path && obj.statementMap && obj.fnMap && obj.branchMap && obj.s && obj.f && obj.b;\n\n  if (!valid) {\n    throw new Error('Invalid file coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n\nconst keyFromLoc = ({\n  start,\n  end\n}) => `${start.line}|${start.column}|${end.line}|${end.column}`;\n\nconst mergeProp = (aHits, aMap, bHits, bMap, itemKey = keyFromLoc) => {\n  const aItems = Object.values(aHits).reduce((items, itemHits, i) => {\n    const item = aMap[i];\n    items[itemKey(item)] = [itemHits, item];\n    return items;\n  }, {});\n  Object.values(bHits).forEach((bItemHits, i) => {\n    const bItem = bMap[i];\n    const k = itemKey(bItem);\n\n    if (aItems[k]) {\n      const aPair = aItems[k];\n\n      if (bItemHits.forEach) {\n        // should this throw an exception if aPair[0] is not an array?\n        bItemHits.forEach((hits, h) => {\n          if (aPair[0][h] !== undefined) aPair[0][h] += hits;else aPair[0][h] = hits;\n        });\n      } else {\n        aPair[0] += bItemHits;\n      }\n    } else {\n      aItems[k] = [bItemHits, bItem];\n    }\n  });\n  const hits = {};\n  const map = {};\n  Object.values(aItems).forEach(([itemHits, item], i) => {\n    hits[i] = itemHits;\n    map[i] = item;\n  });\n  return [hits, map];\n};\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\n\n\nclass FileCoverage {\n  /**\n   * @constructor\n   * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n   * and empty coverage object with the specified file path or a data object that\n   * has all the required properties for a file coverage object.\n   */\n  constructor(pathOrObj) {\n    if (!pathOrObj) {\n      throw new Error('Coverage must be initialized with a path or an object');\n    }\n\n    if (typeof pathOrObj === 'string') {\n      this.data = emptyCoverage(pathOrObj);\n    } else if (pathOrObj instanceof FileCoverage) {\n      this.data = pathOrObj.data;\n    } else if (typeof pathOrObj === 'object') {\n      this.data = pathOrObj;\n    } else {\n      throw new Error('Invalid argument to coverage constructor');\n    }\n\n    assertValidObject(this.data);\n  }\n  /**\n   * returns computed line coverage from statement coverage.\n   * This is a map of hits keyed by line number in the source.\n   */\n\n\n  getLineCoverage() {\n    const statementMap = this.data.statementMap;\n    const statements = this.data.s;\n    const lineMap = Object.create(null);\n    Object.entries(statements).forEach(([st, count]) => {\n      /* istanbul ignore if: is this even possible? */\n      if (!statementMap[st]) {\n        return;\n      }\n\n      const {\n        line\n      } = statementMap[st].start;\n      const prevVal = lineMap[line];\n\n      if (prevVal === undefined || prevVal < count) {\n        lineMap[line] = count;\n      }\n    });\n    return lineMap;\n  }\n  /**\n   * returns an array of uncovered line numbers.\n   * @returns {Array} an array of line numbers for which no hits have been\n   *  collected.\n   */\n\n\n  getUncoveredLines() {\n    const lc = this.getLineCoverage();\n    const ret = [];\n    Object.entries(lc).forEach(([l, hits]) => {\n      if (hits === 0) {\n        ret.push(l);\n      }\n    });\n    return ret;\n  }\n  /**\n   * returns a map of branch coverage by source line number.\n   * @returns {Object} an object keyed by line number. Each object\n   * has a `covered`, `total` and `coverage` (percentage) property.\n   */\n\n\n  getBranchCoverageByLine() {\n    const branchMap = this.branchMap;\n    const branches = this.b;\n    const ret = {};\n    Object.entries(branchMap).forEach(([k, map]) => {\n      const line = map.line || map.loc.start.line;\n      const branchData = branches[k];\n      ret[line] = ret[line] || [];\n      ret[line].push(...branchData);\n    });\n    Object.entries(ret).forEach(([k, dataArray]) => {\n      const covered = dataArray.filter(item => item > 0);\n      const coverage = covered.length / dataArray.length * 100;\n      ret[k] = {\n        covered: covered.length,\n        total: dataArray.length,\n        coverage\n      };\n    });\n    return ret;\n  }\n  /**\n   * return a JSON-serializable POJO for this file coverage object\n   */\n\n\n  toJSON() {\n    return this.data;\n  }\n  /**\n   * merges a second coverage object into this one, updating hit counts\n   * @param {FileCoverage} other - the coverage object to be merged into this one.\n   *  Note that the other object should have the same structure as this one (same file).\n   */\n\n\n  merge(other) {\n    if (other.all === true) {\n      return;\n    }\n\n    if (this.all === true) {\n      this.data = other.data;\n      return;\n    }\n\n    let [hits, map] = mergeProp(this.s, this.statementMap, other.s, other.statementMap);\n    this.data.s = hits;\n    this.data.statementMap = map;\n\n    const keyFromLocProp = x => keyFromLoc(x.loc);\n\n    const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n\n    [hits, map] = mergeProp(this.f, this.fnMap, other.f, other.fnMap, keyFromLocProp);\n    this.data.f = hits;\n    this.data.fnMap = map;\n    [hits, map] = mergeProp(this.b, this.branchMap, other.b, other.branchMap, keyFromLocationsProp);\n    this.data.b = hits;\n    this.data.branchMap = map;\n  }\n\n  computeSimpleTotals(property) {\n    let stats = this[property];\n\n    if (typeof stats === 'function') {\n      stats = stats.call(this);\n    }\n\n    const ret = {\n      total: Object.keys(stats).length,\n      covered: Object.values(stats).filter(v => !!v).length,\n      skipped: 0\n    };\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n\n  computeBranchTotals() {\n    const stats = this.b;\n    const ret = {\n      total: 0,\n      covered: 0,\n      skipped: 0\n    };\n    Object.values(stats).forEach(branches => {\n      ret.covered += branches.filter(hits => hits > 0).length;\n      ret.total += branches.length;\n    });\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n  /**\n   * resets hit counts for all statements, functions and branches\n   * in this coverage object resulting in zero coverage.\n   */\n\n\n  resetHits() {\n    const statements = this.s;\n    const functions = this.f;\n    const branches = this.b;\n    Object.keys(statements).forEach(s => {\n      statements[s] = 0;\n    });\n    Object.keys(functions).forEach(f => {\n      functions[f] = 0;\n    });\n    Object.keys(branches).forEach(b => {\n      branches[b].fill(0);\n    });\n  }\n  /**\n   * returns a CoverageSummary for this file coverage object\n   * @returns {CoverageSummary}\n   */\n\n\n  toSummary() {\n    const ret = {};\n    ret.lines = this.computeSimpleTotals('getLineCoverage');\n    ret.functions = this.computeSimpleTotals('f', 'fnMap');\n    ret.statements = this.computeSimpleTotals('s', 'statementMap');\n    ret.branches = this.computeBranchTotals();\n    return new CoverageSummary(ret);\n  }\n\n} // expose coverage data attributes\n\n\ndataProperties(FileCoverage, ['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b', 'all']);\nmodule.exports = {\n  FileCoverage\n};","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/netflixclone/node_modules/istanbul-lib-coverage/lib/file-coverage.js"],"names":["percent","require","dataProperties","CoverageSummary","emptyCoverage","filePath","path","statementMap","fnMap","branchMap","s","f","b","assertValidObject","obj","valid","Error","Object","keys","join","keyFromLoc","start","end","line","column","mergeProp","aHits","aMap","bHits","bMap","itemKey","aItems","values","reduce","items","itemHits","i","item","forEach","bItemHits","bItem","k","aPair","hits","h","undefined","map","FileCoverage","constructor","pathOrObj","data","getLineCoverage","statements","lineMap","create","entries","st","count","prevVal","getUncoveredLines","lc","ret","l","push","getBranchCoverageByLine","branches","loc","branchData","dataArray","covered","filter","coverage","length","total","toJSON","merge","other","all","keyFromLocProp","x","keyFromLocationsProp","locations","computeSimpleTotals","property","stats","call","v","skipped","pct","computeBranchTotals","resetHits","functions","fill","toSummary","lines","module","exports"],"mappings":"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","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\nconst { CoverageSummary } = require('./coverage-summary');\n\n// returns a data object that represents empty coverage\nfunction emptyCoverage(filePath) {\n    return {\n        path: filePath,\n        statementMap: {},\n        fnMap: {},\n        branchMap: {},\n        s: {},\n        f: {},\n        b: {}\n    };\n}\n\n// asserts that a data object \"looks like\" a coverage object\nfunction assertValidObject(obj) {\n    const valid =\n        obj &&\n        obj.path &&\n        obj.statementMap &&\n        obj.fnMap &&\n        obj.branchMap &&\n        obj.s &&\n        obj.f &&\n        obj.b;\n    if (!valid) {\n        throw new Error(\n            'Invalid file coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n\nconst keyFromLoc = ({ start, end }) =>\n    `${start.line}|${start.column}|${end.line}|${end.column}`;\n\nconst mergeProp = (aHits, aMap, bHits, bMap, itemKey = keyFromLoc) => {\n    const aItems = Object.values(aHits).reduce((items, itemHits, i) => {\n        const item = aMap[i];\n        items[itemKey(item)] = [itemHits, item];\n        return items;\n    }, {});\n\n    Object.values(bHits).forEach((bItemHits, i) => {\n        const bItem = bMap[i];\n        const k = itemKey(bItem);\n\n        if (aItems[k]) {\n            const aPair = aItems[k];\n            if (bItemHits.forEach) {\n                // should this throw an exception if aPair[0] is not an array?\n                bItemHits.forEach((hits, h) => {\n                    if (aPair[0][h] !== undefined) aPair[0][h] += hits;\n                    else aPair[0][h] = hits;\n                });\n            } else {\n                aPair[0] += bItemHits;\n            }\n        } else {\n            aItems[k] = [bItemHits, bItem];\n        }\n    });\n\n    const hits = {};\n    const map = {};\n\n    Object.values(aItems).forEach(([itemHits, item], i) => {\n        hits[i] = itemHits;\n        map[i] = item;\n    });\n\n    return [hits, map];\n};\n\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\nclass FileCoverage {\n    /**\n     * @constructor\n     * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n     * and empty coverage object with the specified file path or a data object that\n     * has all the required properties for a file coverage object.\n     */\n    constructor(pathOrObj) {\n        if (!pathOrObj) {\n            throw new Error(\n                'Coverage must be initialized with a path or an object'\n            );\n        }\n        if (typeof pathOrObj === 'string') {\n            this.data = emptyCoverage(pathOrObj);\n        } else if (pathOrObj instanceof FileCoverage) {\n            this.data = pathOrObj.data;\n        } else if (typeof pathOrObj === 'object') {\n            this.data = pathOrObj;\n        } else {\n            throw new Error('Invalid argument to coverage constructor');\n        }\n        assertValidObject(this.data);\n    }\n\n    /**\n     * returns computed line coverage from statement coverage.\n     * This is a map of hits keyed by line number in the source.\n     */\n    getLineCoverage() {\n        const statementMap = this.data.statementMap;\n        const statements = this.data.s;\n        const lineMap = Object.create(null);\n\n        Object.entries(statements).forEach(([st, count]) => {\n            /* istanbul ignore if: is this even possible? */\n            if (!statementMap[st]) {\n                return;\n            }\n            const { line } = statementMap[st].start;\n            const prevVal = lineMap[line];\n            if (prevVal === undefined || prevVal < count) {\n                lineMap[line] = count;\n            }\n        });\n        return lineMap;\n    }\n\n    /**\n     * returns an array of uncovered line numbers.\n     * @returns {Array} an array of line numbers for which no hits have been\n     *  collected.\n     */\n    getUncoveredLines() {\n        const lc = this.getLineCoverage();\n        const ret = [];\n        Object.entries(lc).forEach(([l, hits]) => {\n            if (hits === 0) {\n                ret.push(l);\n            }\n        });\n        return ret;\n    }\n\n    /**\n     * returns a map of branch coverage by source line number.\n     * @returns {Object} an object keyed by line number. Each object\n     * has a `covered`, `total` and `coverage` (percentage) property.\n     */\n    getBranchCoverageByLine() {\n        const branchMap = this.branchMap;\n        const branches = this.b;\n        const ret = {};\n        Object.entries(branchMap).forEach(([k, map]) => {\n            const line = map.line || map.loc.start.line;\n            const branchData = branches[k];\n            ret[line] = ret[line] || [];\n            ret[line].push(...branchData);\n        });\n        Object.entries(ret).forEach(([k, dataArray]) => {\n            const covered = dataArray.filter(item => item > 0);\n            const coverage = (covered.length / dataArray.length) * 100;\n            ret[k] = {\n                covered: covered.length,\n                total: dataArray.length,\n                coverage\n            };\n        });\n        return ret;\n    }\n\n    /**\n     * return a JSON-serializable POJO for this file coverage object\n     */\n    toJSON() {\n        return this.data;\n    }\n\n    /**\n     * merges a second coverage object into this one, updating hit counts\n     * @param {FileCoverage} other - the coverage object to be merged into this one.\n     *  Note that the other object should have the same structure as this one (same file).\n     */\n    merge(other) {\n        if (other.all === true) {\n            return;\n        }\n\n        if (this.all === true) {\n            this.data = other.data;\n            return;\n        }\n\n        let [hits, map] = mergeProp(\n            this.s,\n            this.statementMap,\n            other.s,\n            other.statementMap\n        );\n        this.data.s = hits;\n        this.data.statementMap = map;\n\n        const keyFromLocProp = x => keyFromLoc(x.loc);\n        const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n\n        [hits, map] = mergeProp(\n            this.f,\n            this.fnMap,\n            other.f,\n            other.fnMap,\n            keyFromLocProp\n        );\n        this.data.f = hits;\n        this.data.fnMap = map;\n\n        [hits, map] = mergeProp(\n            this.b,\n            this.branchMap,\n            other.b,\n            other.branchMap,\n            keyFromLocationsProp\n        );\n        this.data.b = hits;\n        this.data.branchMap = map;\n    }\n\n    computeSimpleTotals(property) {\n        let stats = this[property];\n\n        if (typeof stats === 'function') {\n            stats = stats.call(this);\n        }\n\n        const ret = {\n            total: Object.keys(stats).length,\n            covered: Object.values(stats).filter(v => !!v).length,\n            skipped: 0\n        };\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    computeBranchTotals() {\n        const stats = this.b;\n        const ret = { total: 0, covered: 0, skipped: 0 };\n\n        Object.values(stats).forEach(branches => {\n            ret.covered += branches.filter(hits => hits > 0).length;\n            ret.total += branches.length;\n        });\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    /**\n     * resets hit counts for all statements, functions and branches\n     * in this coverage object resulting in zero coverage.\n     */\n    resetHits() {\n        const statements = this.s;\n        const functions = this.f;\n        const branches = this.b;\n        Object.keys(statements).forEach(s => {\n            statements[s] = 0;\n        });\n        Object.keys(functions).forEach(f => {\n            functions[f] = 0;\n        });\n        Object.keys(branches).forEach(b => {\n            branches[b].fill(0);\n        });\n    }\n\n    /**\n     * returns a CoverageSummary for this file coverage object\n     * @returns {CoverageSummary}\n     */\n    toSummary() {\n        const ret = {};\n        ret.lines = this.computeSimpleTotals('getLineCoverage');\n        ret.functions = this.computeSimpleTotals('f', 'fnMap');\n        ret.statements = this.computeSimpleTotals('s', 'statementMap');\n        ret.branches = this.computeBranchTotals();\n        return new CoverageSummary(ret);\n    }\n}\n\n// expose coverage data attributes\ndataProperties(FileCoverage, [\n    'path',\n    'statementMap',\n    'fnMap',\n    'branchMap',\n    's',\n    'f',\n    'b',\n    'all'\n]);\n\nmodule.exports = {\n    FileCoverage\n};\n"]},"metadata":{},"sourceType":"script"}