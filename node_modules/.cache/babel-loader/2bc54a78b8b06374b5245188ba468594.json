{"ast":null,"code":"var _jsxFileName = \"/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useMemo, createRef, useState } from 'react';\nimport { capitalizeFirstLetter } from '../helper/helper';\nimport YoutubeEmbed from './YoutubeEmbed';\nimport MainMedia from './MainMedia';\nimport MediaBar from './MediaBar';\nimport Preview from './Preview';\nimport films from '../assets/films';\nimport '../styles/Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [currentMedia, setCurrentMedia] = useState(null);\n  const [preview, setPreview] = useState(null);\n\n  function onClickHand(e) {\n    const [genre,,] = e.target.classList;\n    const filmName = e.target.alt;\n\n    if (true) {\n      const preview = document.querySelector(`#${genre}Preview`); //select preview container based on genre\n\n      setPreview( /*#__PURE__*/_jsxDEV(Preview, {\n        preview: getPreview(genre, filmName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 24\n      }, this)); // preview.setAttribute('style', `background: url(${getPreview(genre, filmName)})`);\n      // preview.classList.add('active');\n    } else {\n      const catalog = films[genre].find(item => item.title === filmName);\n      setCurrentMedia( /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n        embedId: catalog.YTLink,\n        stopPlayHand: stopPlayHand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 29\n      }, this));\n    }\n  }\n\n  function getPreview(genre, filmName) {\n    return require(`../assets/films/${genre}/${filmName}/large.jpg`).default;\n  }\n\n  function hoverPlayBtn(e) {\n    e.target.classList.add('hover');\n  }\n\n  function hoverOffPlayBtn(e) {\n    e.target.classList.remove('hover');\n  }\n\n  function hoverImgHand(e) {\n    e.target.classList.add('cardImgHover');\n  }\n\n  function hoverOutImgHand(e) {\n    e.target.classList.remove('cardImgHover');\n  }\n\n  function playBtnClickHand(e, url) {\n    setCurrentMedia( /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n      embedId: url,\n      stopPlayHand: stopPlayHand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }, this));\n  }\n\n  function stopPlayHand(e) {\n    setCurrentMedia(null);\n  }\n\n  function makeMediaBar() {\n    let arr = [];\n\n    for (let genre in films) {\n      arr.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"media-title\",\n            children: capitalizeFirstLetter(genre)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MediaBar, {\n            title: genre,\n            onClickHand: onClickHand,\n            hoverImgHand: hoverImgHand,\n            hoverOutImgHand: hoverOutImgHand\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `${genre}Preview`,\n            className: \"preview-container\",\n            children: preview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this));\n    }\n\n    return arr.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(MainMedia, {\n      display: `joker`,\n      hoverPlayBtn: hoverPlayBtn,\n      hoverOffPlayBtn: hoverOffPlayBtn,\n      playBtnClickHand: playBtnClickHand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: makeMediaBar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), currentMedia]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"IV5NQbS8pDq+4+PtBmb1opDxVHo=\");\n\n_c = Dashboard;\nexport default Dashboard;\n{\n  /* <div ref={media}>\n     <div>\n         <MediaBar title={`children`} onClickHand={onClickHand} />\n         <div id='children'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`drama`} onClickHand={onClickHand} />\n         <div id='drama'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`romance`} onClickHand={onClickHand} />\n         <div id='romance'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`suspense`} onClickHand={onClickHand} />\n         <div id='suspense'>Hello World</div>\n     </div>\n     <div>\n         <MediaBar title={`thriller`} onClickHand={onClickHand} />\n         <div id='thriller'>Hello World</div>\n     </div>\n  </div> */\n} // <div className='previewCont'>\n//     <p className='previewTitle'>{configTitle(item.title)}</p>\n//     <p>{item.description}</p>\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/netflixclone/src/components/Dashboard.js"],"names":["useRef","useMemo","createRef","useState","capitalizeFirstLetter","YoutubeEmbed","MainMedia","MediaBar","Preview","films","Dashboard","currentMedia","setCurrentMedia","preview","setPreview","onClickHand","e","genre","target","classList","filmName","alt","document","querySelector","getPreview","catalog","find","item","title","YTLink","stopPlayHand","require","default","hoverPlayBtn","add","hoverOffPlayBtn","remove","hoverImgHand","hoverOutImgHand","playBtnClickHand","url","makeMediaBar","arr","push","map","index"],"mappings":"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","sourcesContent":["import { useRef, useMemo, createRef, useState } from 'react';\nimport { capitalizeFirstLetter } from '../helper/helper';\nimport YoutubeEmbed from './YoutubeEmbed';\nimport MainMedia from './MainMedia';\nimport MediaBar from './MediaBar';\nimport Preview from './Preview';\nimport films from '../assets/films';\nimport '../styles/Dashboard.css';\n\nconst Dashboard = () => {\n    const [currentMedia, setCurrentMedia] = useState(null);\n    const [preview, setPreview] = useState(null);\n\n    function onClickHand(e) {\n        const [genre, ,] = e.target.classList;\n        const filmName = e.target.alt;\n        if (true) {\n            const preview = document.querySelector(`#${genre}Preview`); //select preview container based on genre\n            setPreview(<Preview preview={getPreview(genre, filmName)} />);\n\n            // preview.setAttribute('style', `background: url(${getPreview(genre, filmName)})`);\n            // preview.classList.add('active');\n\n        } else {\n            const catalog = films[genre].find((item) => item.title === filmName);\n            setCurrentMedia(<YoutubeEmbed embedId={catalog.YTLink} stopPlayHand={stopPlayHand} />);\n        }\n    }\n\n    function getPreview(genre, filmName) {\n        return require(`../assets/films/${genre}/${filmName}/large.jpg`).default;\n    }\n\n    function hoverPlayBtn(e) {\n        e.target.classList.add('hover');\n    }\n\n    function hoverOffPlayBtn(e) {\n        e.target.classList.remove('hover');\n    }\n\n    function hoverImgHand(e) {\n        e.target.classList.add('cardImgHover');\n    }\n\n    function hoverOutImgHand(e) {\n        e.target.classList.remove('cardImgHover');\n    }\n\n    function playBtnClickHand(e, url) {\n        setCurrentMedia(<YoutubeEmbed embedId={url} stopPlayHand={stopPlayHand} />);\n    }\n\n    function stopPlayHand(e) {\n        setCurrentMedia(null);\n    }\n\n    function makeMediaBar() {\n        let arr = [];\n        for (let genre in films) {\n            arr.push(\n                <div className='media-wrapper'>\n                    <div className='media-container'>\n                        <div className='media-title'>{capitalizeFirstLetter(genre)}</div>\n                        <MediaBar\n                            title={genre}\n                            onClickHand={onClickHand}\n                            hoverImgHand={hoverImgHand}\n                            hoverOutImgHand={hoverOutImgHand}\n                        />\n                        <div id={`${genre}Preview`} className='preview-container'>\n                            {preview}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        return arr.map((item, index) => {\n            return (\n                <div key={index}>\n                    {item}\n                </div>\n            );\n        });\n    }\n\n    return (\n        <div className='dashboard'>\n            <MainMedia\n                display={`joker`}\n                hoverPlayBtn={hoverPlayBtn}\n                hoverOffPlayBtn={hoverOffPlayBtn}\n                playBtnClickHand={playBtnClickHand} />\n            <div>\n                {makeMediaBar()}\n            </div>\n            {currentMedia}\n        </div >\n    );\n};\n\nexport default Dashboard;\n\n\n{/* <div ref={media}>\n    <div>\n        <MediaBar title={`children`} onClickHand={onClickHand} />\n        <div id='children'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`drama`} onClickHand={onClickHand} />\n        <div id='drama'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`romance`} onClickHand={onClickHand} />\n        <div id='romance'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`suspense`} onClickHand={onClickHand} />\n        <div id='suspense'>Hello World</div>\n    </div>\n    <div>\n        <MediaBar title={`thriller`} onClickHand={onClickHand} />\n        <div id='thriller'>Hello World</div>\n    </div>\n</div> */}\n\n\n    // <div className='previewCont'>\n    //     <p className='previewTitle'>{configTitle(item.title)}</p>\n    //     <p>{item.description}</p>\n    // </div>"]},"metadata":{},"sourceType":"module"}